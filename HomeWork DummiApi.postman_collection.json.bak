{
	"info": {
		"_postman_id": "8fdffd1c-68dd-49eb-903b-5b0c0ee50706",
		"name": "HomeWork DummiApi",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36907800"
	},
	"item": [
		{
			"name": "User List (no auth)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 403\", function () {\r",
							"    pm.response.to.have.status(403);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}user",
					"host": [
						"{{url}}user"
					]
				}
			},
			"response": []
		},
		{
			"name": "User List (no endpoint)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 600ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "User List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 600ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}user",
					"host": [
						"{{url}}user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 600ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// генерация для случайного имени\r",
							"function generateRandomNameSyllables() {\r",
							"    const allChars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZабвгдеёжзикламнопрстуфхцшщъыьэюяАБВГДЕЁЖЗИКЛМНОПРСТУФХЦШЩЪЫЬЭЮЯ0123456789@$%^*(){}/:''.,?!-+=|\\\"[]\";\r",
							"    const allowedCharsRegex = /^[a-zA-Z0-9\\\\-_\\\\.\\\\s]+$/;\r",
							"    const minLength = 2;\r",
							"    const maxLength = 30;\r",
							"    let name;\r",
							"\r",
							"    do {\r",
							"        const nameLength = Math.floor(Math.random() * (maxLength - minLength + 1)) + minLength;\r",
							"        name = '';\r",
							"        for (let i = 0; i < nameLength; i++) {\r",
							"            name += allChars[Math.floor(Math.random() * allChars.length)];\r",
							"        }\r",
							"    } while (!allowedCharsRegex.test(name) || name.length < minLength || name.length > maxLength);\r",
							"\r",
							"    return name;\r",
							"}\r",
							"\r",
							"// генерация для случайного email\r",
							"function generateRandomEmailWithRandomDomain() {\r",
							"    const domains = [\"example.com\", \"test.org\", \"random.net\", \"domain.com\", \"mail.ru\", \"yahoo.com\", \"gmail.ru\", \"yandex.ru\", \"bk.ru\", \"list.ru\", \"gmail.com\", \"domain.com\", \"gmail.ru.com\", \"list.org.net\", \"google.net\", \"a@b\", \"weqeqdsaffasdsafds@mail.ru\", \"@verylongdomainname12345678901234567890123456789012345678901234567890123456789012345.com\"];\r",
							"    const allowedChars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r",
							"    const minLength = 1;\r",
							"    const maxLength = 256;\r",
							"    let username;\r",
							"    do {\r",
							"        username = '';\r",
							"        for (let i = 0; i < (Math.floor(Math.random() * (maxLength - minLength + 1)) + minLength); i++){\r",
							"           username += allowedChars.charAt(Math.floor(Math.random() * allowedChars.length));\r",
							"        }\r",
							"    } while (username.length < minLength || username.length > maxLength);\r",
							"    return `${username}@${domains[Math.floor(Math.random() * domains.length)]}`;\r",
							"}\r",
							"\r",
							"function generateMaxLengthEmail(nameLength, domainLength) {\r",
							"  const chars = \"abcdefghijklmnopqrstuvwxyz0123456789\";\r",
							"\r",
							"  const name = Array.from({ length: nameLength }, () => chars[Math.floor(Math.random() * chars.length)]).join(\"\");\r",
							"  const domain = Array.from({ length: domainLength - 4 }, () => chars[Math.floor(Math.random() * chars.length)]).join(\"\") + \".com\";\r",
							"\r",
							"\r",
							"    return `${name}@${domain}`;\r",
							"}\r",
							"\r",
							"//пример\r",
							"console.log(generateMaxLengthEmail(128, 128))\r",
							"\r",
							"// генерация случайного заголовка\r",
							"function generateTitle() {\r",
							"    const titles = [\"mr\", \"ms\", \"mrs\", \"miss\", \"dr\"];\r",
							"    const randomIndex = Math.floor(Math.random() * titles.length);\r",
							"    return titles[randomIndex];\r",
							"}\r",
							"\r",
							"// генерация случайного гендера\r",
							"function generateGender() {\r",
							"    const genders = [\"male\", \"female\", \"other\"];\r",
							"    const randomIndex = Math.floor(Math.random() * genders.length);\r",
							"    return genders[randomIndex];\r",
							"}\r",
							"\r",
							"// генерация случайного номера\r",
							"function generatephoneNumber(length = 10) {\r",
							"    let phoneNumber = \"+\"; // Инициализация с \"+\"\r",
							"    for (let i = 0; i < length; i++) {\r",
							"        phoneNumber += Math.floor(Math.random() * 10);\r",
							"    }\r",
							"    return phoneNumber;\r",
							"}\r",
							"\r",
							"function generateISODate() {\r",
							"    return new Date().toISOString();\r",
							"}\r",
							"\r",
							"function generateRandomDateOfBirth(year) {\r",
							"    let startDate;\r",
							"    let endDate;\r",
							"\r",
							"    if (year) {\r",
							"        startDate = new Date(`${year}-01-01T00:00:00.000Z`);\r",
							"        endDate = new Date(`${year}-12-31T23:59:59.999Z`);\r",
							"    } else {\r",
							"        startDate = new Date('1900-01-01T00:00:00.000Z');\r",
							"        endDate = new Date();\r",
							"    }\r",
							"\r",
							"    const timeDiff = endDate.getTime() - startDate.getTime();\r",
							"    const randomTime = Math.random() * timeDiff;\r",
							"    return new Date(startDate.getTime() + randomTime).toISOString();\r",
							"}\r",
							"\r",
							"function generateRandomPictureUrl(\r",
							"    baseUrl = \"https://randomuser.me/api/portraits/\",\r",
							"    genders = [\"men\", \"women\"],\r",
							"    minId = 0,\r",
							"    maxId = 99,\r",
							"    fileExtension = \"jpg\"\r",
							") {\r",
							"    try {\r",
							"        new URL(baseUrl);\r",
							"    } catch (e) {\r",
							"        console.warn(\"Invalid base url, falling back to default:\", baseUrl);\r",
							"        baseUrl = \"https://randomuser.me/api/portraits/\";\r",
							"    }\r",
							"    if (minId < 0) minId = 0;\r",
							"    if (maxId < minId) maxId = minId;\r",
							"\r",
							"    const randomGender = genders[Math.floor(Math.random() * genders.length)];\r",
							"    const randomId = Math.floor(Math.random() * (maxId - minId + 1)) + minId;\r",
							"    return `${baseUrl}${randomGender}/${randomId}.${fileExtension}`;\r",
							"}\r",
							"\r",
							"function generateRandomLocation() {\r",
							"    const allowedChars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
							"    \r",
							"    const generateRandomString = (length, allowedChars) => {\r",
							"        if (typeof length !== 'number' || length <= 0) {\r",
							"            console.error(\"Error in generateRandomString: Invalid length\");\r",
							"            return '';\r",
							"        }\r",
							"        let result = '';\r",
							"        for (let i = 0; i < length; i++) {\r",
							"            result += allowedChars.charAt(Math.floor(Math.random() * allowedChars.length));\r",
							"        }\r",
							"        return result;\r",
							"    };\r",
							"    \r",
							"   let streetLength = Math.random() > 0.5 ? 2 : 5;\r",
							"    let cityLength = Math.random() > 0.5 ? 2 : 30;\r",
							"    let stateLength = Math.random() > 0.5 ? 2 : 30;\r",
							"    let countryLength = Math.random() > 0.5 ? 5 : 5;\r",
							"\r",
							"\r",
							"    return {\r",
							"        street: generateRandomString(streetLength, allowedChars),\r",
							"        city: generateRandomString(cityLength, allowedChars),\r",
							"        state: generateRandomString(stateLength, allowedChars),\r",
							"        country: generateRandomString(countryLength, allowedChars),\r",
							"        timezone: `${String(Math.floor(Math.random() * 24)).padStart(2, '0')}:${String(Math.floor(Math.random() * 60)).padStart(2, '0')}`,\r",
							"        zipCode: generateRandomString(5, '0123456789')\r",
							"    };\r",
							"}\r",
							"\r",
							"\r",
							"try {\r",
							"    const firstName = generateRandomNameSyllables(2, 30);\r",
							"    const lastName = generateRandomNameSyllables(2, 30);\r",
							"    const email = generateRandomEmailWithRandomDomain();\r",
							"    const title = generateTitle();\r",
							"    const gender = generateGender();\r",
							"    const phoneNumber = generatephoneNumber();\r",
							"    const registerDate = generateISODate();\r",
							"    const updatedDate = generateISODate();\r",
							"    const location = generateRandomLocation();\r",
							"    const randomPicture = generateRandomPictureUrl();\r",
							"    const dateOfBirth = generateRandomDateOfBirth();\r",
							"\r",
							"    console.log(\"firstName:\", firstName);\r",
							"    console.log(\"lastName:\", lastName);\r",
							"    console.log(\"email:\", email);\r",
							"    console.log(\"title:\", title);\r",
							"    console.log(\"gender:\", gender);\r",
							"    console.log(\"phoneNumber:\", phoneNumber);\r",
							"    console.log(\"registerDate:\", registerDate);\r",
							"    console.log(\"updatedDate:\", updatedDate);\r",
							"    console.log(\"dateOfBirth:\", dateOfBirth);\r",
							"      console.log(\"randomPicture:\", randomPicture);\r",
							"    console.log(\"location:\", location);\r",
							"\r",
							"    pm.environment.set(\"firstName\", firstName);\r",
							"    pm.environment.set(\"lastName\", lastName);\r",
							"    pm.environment.set(\"email\", email);\r",
							"    pm.environment.set(\"title\", title);\r",
							"    pm.environment.set(\"gender\", gender);\r",
							"    pm.environment.set(\"phoneNumber\", phoneNumber);\r",
							"    pm.environment.set(\"registerDate\", registerDate);\r",
							"    pm.environment.set(\"updatedDate\", updatedDate);\r",
							"    pm.environment.set(\"dateOfBirth\", dateOfBirth);\r",
							"    pm.environment.set(\"picture\", randomPicture);\r",
							"    pm.environment.set(\"locationStreet\", location.street);\r",
							"    pm.environment.set(\"locationCity\", location.city);\r",
							"    pm.environment.set(\"locationState\", location.state);\r",
							"    pm.environment.set(\"locationCountry\", location.country);\r",
							"    pm.environment.set(\"locationTimezone\", location.timezone);\r",
							"} catch (error) {\r",
							"    console.error(\"An error occurred:\", error);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"firstName\": \"{{firstName}}\",\r\n  \"lastName\": \"{{lastName}}\",\r\n  \"email\": \"{{email}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}user/create",
					"host": [
						"{{url}}user"
					],
					"path": [
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 600ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}user/67a465223cf095a76f82c430",
					"host": [
						"{{url}}user"
					],
					"path": [
						"67a465223cf095a76f82c430"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// генерация для случайного имени\r",
							"function generateRandomNameSyllables() {\r",
							"    const allChars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZабвгдеёжзикламнопрстуфхцшщъыьэюяАБВГДЕЁЖЗИКЛМНОПРСТУФХЦШЩЪЫЬЭЮЯ0123456789@$%^*(){}/:''.,?!-+=|\\\"[]\";\r",
							"    const allowedCharsRegex = /^[a-zA-Z0-9\\\\-_\\\\.\\\\s]+$/;\r",
							"    const minLength = 2;\r",
							"    const maxLength = 30;\r",
							"    let name;\r",
							"\r",
							"    do {\r",
							"        const nameLength = Math.floor(Math.random() * (maxLength - minLength + 1)) + minLength;\r",
							"        name = '';\r",
							"        for (let i = 0; i < nameLength; i++) {\r",
							"            name += allChars[Math.floor(Math.random() * allChars.length)];\r",
							"        }\r",
							"    } while (!allowedCharsRegex.test(name) || name.length < minLength || name.length > maxLength);\r",
							"\r",
							"    return name;\r",
							"}\r",
							"\r",
							"// генерация для случайного email\r",
							"function generateRandomEmailWithRandomDomain() {\r",
							"    const domains = [\"example.com\", \"test.org\", \"random.net\", \"domain.com\", \"mail.ru\", \"yahoo.com\", \"gmail.ru\", \"yandex.ru\", \"bk.ru\", \"list.ru\", \"gmail.com\", \"domain.com\", \"gmail.ru.com\", \"list.org.net\", \"google.net\", \"a@b\", \"weqeqdsaffasdsafds@mail.ru\", \"@verylongdomainname12345678901234567890123456789012345678901234567890123456789012345.com\"];\r",
							"    const allowedChars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r",
							"    const minLength = 1;\r",
							"    const maxLength = 256;\r",
							"    let username;\r",
							"    do {\r",
							"        username = '';\r",
							"        for (let i = 0; i < (Math.floor(Math.random() * (maxLength - minLength + 1)) + minLength); i++){\r",
							"           username += allowedChars.charAt(Math.floor(Math.random() * allowedChars.length));\r",
							"        }\r",
							"    } while (username.length < minLength || username.length > maxLength);\r",
							"    return `${username}@${domains[Math.floor(Math.random() * domains.length)]}`;\r",
							"}\r",
							"\r",
							"function generateMaxLengthEmail(nameLength, domainLength) {\r",
							"  const chars = \"abcdefghijklmnopqrstuvwxyz0123456789\";\r",
							"\r",
							"  const name = Array.from({ length: nameLength }, () => chars[Math.floor(Math.random() * chars.length)]).join(\"\");\r",
							"  const domain = Array.from({ length: domainLength - 4 }, () => chars[Math.floor(Math.random() * chars.length)]).join(\"\") + \".com\";\r",
							"\r",
							"\r",
							"    return `${name}@${domain}`;\r",
							"}\r",
							"\r",
							"//пример\r",
							"console.log(generateMaxLengthEmail(128, 128))\r",
							"\r",
							"// генерация случайного заголовка\r",
							"function generateTitle() {\r",
							"    const titles = [\"mr\", \"ms\", \"mrs\", \"miss\", \"dr\"];\r",
							"    const randomIndex = Math.floor(Math.random() * titles.length);\r",
							"    return titles[randomIndex];\r",
							"}\r",
							"\r",
							"// генерация случайного гендера\r",
							"function generateGender() {\r",
							"    const genders = [\"male\", \"female\", \"other\"];\r",
							"    const randomIndex = Math.floor(Math.random() * genders.length);\r",
							"    return genders[randomIndex];\r",
							"}\r",
							"\r",
							"// генерация случайного номера\r",
							"function generatephoneNumber(length = 10) {\r",
							"    let phoneNumber = \"+\"; // Инициализация с \"+\"\r",
							"    for (let i = 0; i < length; i++) {\r",
							"        phoneNumber += Math.floor(Math.random() * 10);\r",
							"    }\r",
							"    return phoneNumber;\r",
							"}\r",
							"\r",
							"function generateISODate() {\r",
							"    return new Date().toISOString();\r",
							"}\r",
							"\r",
							"function generateRandomDateOfBirth(year) {\r",
							"    let startDate;\r",
							"    let endDate;\r",
							"\r",
							"    if (year) {\r",
							"        startDate = new Date(`${year}-01-01T00:00:00.000Z`);\r",
							"        endDate = new Date(`${year}-12-31T23:59:59.999Z`);\r",
							"    } else {\r",
							"        startDate = new Date('1900-01-01T00:00:00.000Z');\r",
							"        endDate = new Date();\r",
							"    }\r",
							"\r",
							"    const timeDiff = endDate.getTime() - startDate.getTime();\r",
							"    const randomTime = Math.random() * timeDiff;\r",
							"    return new Date(startDate.getTime() + randomTime).toISOString();\r",
							"}\r",
							"\r",
							"function generateRandomPictureUrl(\r",
							"    baseUrl = \"https://randomuser.me/api/portraits/\",\r",
							"    genders = [\"men\", \"women\"],\r",
							"    minId = 0,\r",
							"    maxId = 99,\r",
							"    fileExtension = \"jpg\"\r",
							") {\r",
							"    try {\r",
							"        new URL(baseUrl);\r",
							"    } catch (e) {\r",
							"        console.warn(\"Invalid base url, falling back to default:\", baseUrl);\r",
							"        baseUrl = \"https://randomuser.me/api/portraits/\";\r",
							"    }\r",
							"    if (minId < 0) minId = 0;\r",
							"    if (maxId < minId) maxId = minId;\r",
							"\r",
							"    const randomGender = genders[Math.floor(Math.random() * genders.length)];\r",
							"    const randomId = Math.floor(Math.random() * (maxId - minId + 1)) + minId;\r",
							"    return `${baseUrl}${randomGender}/${randomId}.${fileExtension}`;\r",
							"}\r",
							"\r",
							"function generateRandomLocation() {\r",
							"    const allowedChars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r",
							"    \r",
							"    const generateRandomString = (length, allowedChars) => {\r",
							"        if (typeof length !== 'number' || length <= 0) {\r",
							"            console.error(\"Error in generateRandomString: Invalid length\");\r",
							"            return '';\r",
							"        }\r",
							"        let result = '';\r",
							"        for (let i = 0; i < length; i++) {\r",
							"            result += allowedChars.charAt(Math.floor(Math.random() * allowedChars.length));\r",
							"        }\r",
							"        return result;\r",
							"    };\r",
							"    \r",
							"   let streetLength = Math.random() > 0.5 ? 2 : 5;\r",
							"    let cityLength = Math.random() > 0.5 ? 2 : 30;\r",
							"    let stateLength = Math.random() > 0.5 ? 2 : 30;\r",
							"    let countryLength = Math.random() > 0.5 ? 5 : 5;\r",
							"\r",
							"\r",
							"    return {\r",
							"        street: generateRandomString(streetLength, allowedChars),\r",
							"        city: generateRandomString(cityLength, allowedChars),\r",
							"        state: generateRandomString(stateLength, allowedChars),\r",
							"        country: generateRandomString(countryLength, allowedChars),\r",
							"        timezone: `${String(Math.floor(Math.random() * 24)).padStart(2, '0')}:${String(Math.floor(Math.random() * 60)).padStart(2, '0')}`,\r",
							"        zipCode: generateRandomString(5, '0123456789')\r",
							"    };\r",
							"}\r",
							"\r",
							"\r",
							"try {\r",
							"    const firstName = generateRandomNameSyllables(2, 30);\r",
							"    const lastName = generateRandomNameSyllables(2, 30);\r",
							"    const email = generateRandomEmailWithRandomDomain();\r",
							"    const title = generateTitle();\r",
							"    const gender = generateGender();\r",
							"    const phoneNumber = generatephoneNumber();\r",
							"    const registerDate = generateISODate();\r",
							"    const updatedDate = generateISODate();\r",
							"    const location = generateRandomLocation();\r",
							"    const randomPicture = generateRandomPictureUrl();\r",
							"    const dateOfBirth = generateRandomDateOfBirth();\r",
							"\r",
							"    console.log(\"firstName:\", firstName);\r",
							"    console.log(\"lastName:\", lastName);\r",
							"    console.log(\"email:\", email);\r",
							"    console.log(\"title:\", title);\r",
							"    console.log(\"gender:\", gender);\r",
							"    console.log(\"phoneNumber:\", phoneNumber);\r",
							"    console.log(\"registerDate:\", registerDate);\r",
							"    console.log(\"updatedDate:\", updatedDate);\r",
							"    console.log(\"dateOfBirth:\", dateOfBirth);\r",
							"      console.log(\"randomPicture:\", randomPicture);\r",
							"    console.log(\"location:\", location);\r",
							"\r",
							"    pm.environment.set(\"firstName\", firstName);\r",
							"    pm.environment.set(\"lastName\", lastName);\r",
							"    pm.environment.set(\"email\", email);\r",
							"    pm.environment.set(\"title\", title);\r",
							"    pm.environment.set(\"gender\", gender);\r",
							"    pm.environment.set(\"phoneNumber\", phoneNumber);\r",
							"    pm.environment.set(\"registerDate\", registerDate);\r",
							"    pm.environment.set(\"updatedDate\", updatedDate);\r",
							"    pm.environment.set(\"dateOfBirth\", dateOfBirth);\r",
							"    pm.environment.set(\"picture\", randomPicture);\r",
							"    pm.environment.set(\"locationStreet\", location.street);\r",
							"    pm.environment.set(\"locationCity\", location.city);\r",
							"    pm.environment.set(\"locationState\", location.state);\r",
							"    pm.environment.set(\"locationCountry\", location.country);\r",
							"    pm.environment.set(\"locationTimezone\", location.timezone);\r",
							"} catch (error) {\r",
							"    console.error(\"An error occurred:\", error);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"firstName\": \"{{firstName}}\",\r\n  \"lastName\": \"{{lastName}}\",\r\n  \"email\": \"{{email}}\",\r\n  \"title\": \"{{title}}\",\r\n  \"gender\": \"{{gender}}\",\r\n  \"phone\": \"{{phoneNumber}}\",\r\n  \"registerDate\": \"{{registerDate}}\",\r\n  \"updatedDate\": \"{{updatedDate}}\",\r\n  \"dateOfBirth\": \"{{dateOfBirth}}\",\r\n  \"picture\": \"{{picture}}\",\r\n  \"location\": {\r\n    \"street\": \"{{locationStreet}}\",\r\n    \"city\": \"{{locationCity}}\",\r\n    \"state\": \"{{locationState}}\",\r\n    \"country\": \"{{locationCountry}}\",\r\n    \"timezone\": \"{{locationTimezone}}\"\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}user/67a465223cf095a76f82c430",
					"host": [
						"{{url}}user"
					],
					"path": [
						"67a465223cf095a76f82c430"
					]
				}
			},
			"response": []
		},
		{
			"name": "Cheack Update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 600ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}user/67a465223cf095a76f82c430",
					"host": [
						"{{url}}user"
					],
					"path": [
						"67a465223cf095a76f82c430"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post List (no auth)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 403\", function () {\r",
							"    pm.response.to.have.status(403);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 600ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}post",
					"host": [
						"{{url}}post"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 600ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "62e6f10d11c051e2d93a6723",
							"type": "string"
						},
						{
							"key": "key",
							"value": "app-id",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}post",
					"host": [
						"{{url}}post"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post Create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"if (pm.response.text()) {\r",
							"    try {\r",
							"        const responseData = pm.response.json();\r",
							"\r",
							"        // 1. Получаем id поста\r",
							"        const postId = responseData.id;\r",
							"        if (postId) {\r",
							"            pm.environment.set(\"postId\", postId);\r",
							"             console.log(\"Post ID:\", postId);\r",
							"        } else {\r",
							"            console.error(\"Post ID not found in response.\");\r",
							"        }\r",
							"\r",
							"        // 2. Получаем id пользователей (предполагая, что у вас есть массив \"data\" с пользователями)\r",
							"        if(responseData.data){\r",
							"            const userIds = responseData.data.map(user => user.id);\r",
							"            if(userIds && userIds.length > 0){\r",
							"               pm.environment.set(\"user_ids\", JSON.stringify(userIds));\r",
							"              console.log(\"User IDs:\", userIds);\r",
							"            } else {\r",
							"                  console.error(\"No User IDs found in response.\");\r",
							"            }\r",
							"        } else if (responseData.owner && responseData.owner.id) {\r",
							"            // Если id owner находится в поле owner и owner.id\r",
							"            const ownerId = responseData.owner.id\r",
							"            pm.environment.set(\"ownerId\", ownerId);\r",
							"            console.log(\"Owner ID:\", ownerId);\r",
							"          } else {\r",
							"             console.error(\"User IDs or owner id not found in response.\");\r",
							"          }\r",
							"\r",
							"\r",
							"    } catch (error) {\r",
							"        console.error(\"Error parsing response body as JSON:\", error);\r",
							"    }\r",
							"} else {\r",
							"    console.error(\"Response body is empty. Cannot parse as JSON.\")\r",
							"} \r",
							"\r",
							"pm.test(\"Response time is less than 600ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function generateRandomLikes(min = 0, max = 2000000) {\r",
							"    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
							"}\r",
							"\r",
							"function generateRandomTags(minTags = 0, maxTags = 1) {\r",
							"    // Проверка минимального количества тегов\r",
							"    minTags = Math.max(0, minTags);\r",
							"    // Проверка максимального количества тегов\r",
							"    maxTags = Math.max(1, maxTags);\r",
							"\r",
							"   //  Генерируем количество тегов\r",
							"    let numTags = 1;\r",
							"\r",
							"    if(maxTags > 50){\r",
							"       numTags = Math.floor(Math.random() * (maxTags - minTags + 1)) + minTags;\r",
							"    }\r",
							"     const tagsArray = [];\r",
							"     const allowedChars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZабвгдеёжзикламнопрстуфхцшщъыьэюяАБВГДЕЁЖЗИКЛМНОПРСТУФХЦШЩЪЫЬЭЮЯ0123456789\";\r",
							"\r",
							"     const numStrings = Math.floor(Math.random() * 50); // Генерация случайного количества строк от 0 до 1000\r",
							"\r",
							"    for (let i = 0; i < numStrings; i++) {\r",
							"           let tagLength = Math.floor(Math.random() * (10 - 3 + 1)) + 3;\r",
							"          if(tagLength < 1) {\r",
							"               tagLength = 1\r",
							"          }\r",
							"          let randomTag = '';\r",
							"          for (let j = 0; j < tagLength; j++) {\r",
							"             randomTag += allowedChars.charAt(Math.floor(Math.random() * allowedChars.length));\r",
							"          }\r",
							"         tagsArray.push(randomTag);\r",
							"    }\r",
							"\r",
							"\r",
							"    const selectedTags = [];\r",
							"    const usedIndexes = new Set();\r",
							"\r",
							"    while (selectedTags.length < numTags) {\r",
							"        const randomIndex = Math.floor(Math.random() * tagsArray.length);\r",
							"        if (!usedIndexes.has(randomIndex)) {\r",
							"            selectedTags.push(tagsArray[randomIndex]);\r",
							"            usedIndexes.add(randomIndex);\r",
							"        }\r",
							"    }\r",
							"\r",
							"    return selectedTags.join(', ');\r",
							"}\r",
							"\r",
							"function generateRandomText(minLength = 70, maxLength = 100) {\r",
							"    const allowedChars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZабвгдеёжзикламнопрстуфхцшщъыьэюяАБВГДЕЁЖЗИКЛМНОПРСТУФХЦШЩЪЫЬЭЮЯ0123456789@$%^*(){}/:''.,?!-+=|\\\"[]\";\r",
							"    const textLength = Math.floor(Math.random() * (maxLength - minLength + 1)) + minLength;\r",
							"    let text = '';\r",
							"    for (let i = 0; i < textLength; i++) {\r",
							"        text += allowedChars.charAt(Math.floor(Math.random() * allowedChars.length));\r",
							"    }\r",
							"    return text;\r",
							"}\r",
							"\r",
							"function generateRandomPictureUrl(\r",
							"    baseUrl = \"https://randomuser.me/api/portraits/med/\",\r",
							"    genders = [\"men\", \"women\"],\r",
							"    minId = 0,\r",
							"    maxId = 99,\r",
							"    fileExtension = \"jpg\"\r",
							") {\r",
							"    const randomGender = genders[Math.floor(Math.random() * genders.length)];\r",
							"    const randomId = Math.floor(Math.random() * (maxId - minId + 1)) + minId;\r",
							"    return `${baseUrl}${randomGender}/${randomId}.${fileExtension}`;\r",
							"}\r",
							"\r",
							"\r",
							"// Получаем user_ids из переменной окружения и выбираем случайный id\r",
							"const userIdsString = pm.environment.get(\"user_ids\");\r",
							"let userIds = [];\r",
							"\r",
							"try {\r",
							"  userIds = JSON.parse(userIdsString);\r",
							"} catch (e) {\r",
							"   console.error(\"Error parsing user IDs:\", e);\r",
							"}\r",
							"\r",
							"// Выбираем случайный user.id\r",
							"let randomUserId = \"\";\r",
							"if (userIds && userIds.length > 0) {\r",
							"    const randomIndex = Math.floor(Math.random() * userIds.length);\r",
							"    randomUserId = userIds[randomIndex];\r",
							"} else {\r",
							"      console.error(\"No user IDs available\");\r",
							"}\r",
							"\r",
							"\r",
							"// Генерация случайных данных\r",
							"const randomLikes = generateRandomLikes();\r",
							"const randomTags = generateRandomTags();\r",
							"const randomText = generateRandomText();\r",
							"const randomImage = generateRandomPictureUrl();\r",
							"\r",
							"// Устанавливаем значения переменных Postman\r",
							"pm.environment.set(\"likes\", randomLikes);\r",
							"pm.environment.set(\"tags\", randomTags);\r",
							"pm.environment.set(\"text\", randomText);\r",
							"pm.environment.set(\"image\", randomImage);\r",
							"pm.environment.set(\"owner\", randomUserId);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"text\": \"{{text}}\",\r\n  \"image\": \"{{image}}\",\r\n  \"likes\": {{likes}},\r\n  \"tags\": \"{{tags}}\",\r\n  \"owner\": \"67a465223cf095a76f82c430\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}post/create",
					"host": [
						"{{url}}post"
					],
					"path": [
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check Post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 600ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "62e6f10d11c051e2d93a6723",
							"type": "string"
						},
						{
							"key": "key",
							"value": "app-id",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}post/67a466af3cf095479582c45c",
					"host": [
						"{{url}}post"
					],
					"path": [
						"67a466af3cf095479582c45c"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 600ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"if (pm.response.code === 200) {\r",
							"    try {\r",
							"        const updatedPost = pm.response.json();\r",
							"        console.log(\"Updated post data:\", updatedPost);\r",
							"        // Дополнительные проверки обновленных данных\r",
							"        pm.test(\"Text updated correctly\", function () {\r",
							"            pm.expect(updatedPost.text).to.equal(JSON.parse(pm.environment.get(\"updatedPostData\")).text)\r",
							"        });\r",
							"        //Аналогично проверяйте likes и tags.\r",
							"    } catch (error) {\r",
							"        console.error(\"Error parsing response:\", error);\r",
							"    }\r",
							"} else {\r",
							"    console.error(`PUT request failed with status code: ${pm.response.code} - ${pm.response.text()}`);\r",
							"}\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function generateRandomLikes(min = 0, max = 30000) {\r",
							"    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
							"}\r",
							"\r",
							"function generateRandomTags(minTags = 10, maxTags = 20) {\r",
							"    minTags = Math.max(0, minTags);\r",
							"    maxTags = Math.max(0, maxTags);\r",
							"\r",
							"    let numTags = Math.floor(Math.random() * (maxTags - minTags + 1)) + minTags;\r",
							"\r",
							"    const tagsArray = [];\r",
							"    const allowedChars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r",
							"\r",
							"    const numStrings = Math.max(1, Math.floor(Math.random() * 500) + numTags);\r",
							"\r",
							"    for (let i = 0; i < numStrings; i++) {\r",
							"        let tagLength = Math.floor(Math.random() * (10 - 3 + 1)) + 3;\r",
							"        if (tagLength < 1) {\r",
							"            tagLength = 1\r",
							"        }\r",
							"        let randomTag = '';\r",
							"        for (let j = 0; j < tagLength; j++) {\r",
							"            randomTag += allowedChars.charAt(Math.floor(Math.random() * allowedChars.length));\r",
							"        }\r",
							"        tagsArray.push(randomTag);\r",
							"    }\r",
							"\r",
							"    const selectedTags = [];\r",
							"    const usedIndexes = new Set();\r",
							"\r",
							"    if (tagsArray.length > 0) {\r",
							"        while (selectedTags.length < numTags) {\r",
							"            const randomIndex = Math.floor(Math.random() * tagsArray.length);\r",
							"            if (!usedIndexes.has(randomIndex)) {\r",
							"                selectedTags.push(tagsArray[randomIndex]);\r",
							"                usedIndexes.add(randomIndex);\r",
							"            }\r",
							"        }\r",
							"    } else {\r",
							"        console.error(\"tagsArray is empty\");\r",
							"    }\r",
							"    return selectedTags.join(', ');\r",
							"}\r",
							"function generateRandomText(minLength = 1, maxLength = 5) {\r",
							"    const allowedChars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r",
							"    const textLength = Math.floor(Math.random() * (maxLength - minLength + 1)) + minLength;\r",
							"    let text = '';\r",
							"    for (let i = 0; i < textLength; i++) {\r",
							"        text += allowedChars.charAt(Math.floor(Math.random() * allowedChars.length));\r",
							"    }\r",
							"    return text;\r",
							"}\r",
							"\r",
							"function generateRandomPictureUrl(\r",
							"    baseUrl = \"https://randomuser.me/api/portraits/med/\",\r",
							"    genders = [\"men\", \"women\"],\r",
							"    minId = 0,\r",
							"    maxId = 99,\r",
							"    fileExtension = \"jpg\"\r",
							") {\r",
							"    const randomGender = genders[Math.floor(Math.random() * genders.length)];\r",
							"    const randomId = Math.floor(Math.random() * (maxId - minId + 1)) + minId;\r",
							"    return `${baseUrl}${randomGender}/${randomId}.${fileExtension}`;\r",
							"}\r",
							"\r",
							"\r",
							"// Получаем user_ids из переменной окружения и выбираем случайный id\r",
							"const userIdsString = pm.environment.get(\"user_ids\");\r",
							"let userIds = [];\r",
							"\r",
							"try {\r",
							"  userIds = JSON.parse(userIdsString);\r",
							"} catch (e) {\r",
							"   console.error(\"Error parsing user IDs:\", e);\r",
							"}\r",
							"\r",
							"// Выбираем случайный user.id\r",
							"let randomUserId = \"\";\r",
							"if (userIds && userIds.length > 0) {\r",
							"    const randomIndex = Math.floor(Math.random() * userIds.length);\r",
							"    randomUserId = userIds[randomIndex];\r",
							"} else {\r",
							"      console.error(\"No user IDs available\");\r",
							"}\r",
							"\r",
							"async function prepareUpdateData() {\r",
							"    try {\r",
							"        const responseGet = await pm.sendRequest({\r",
							"            url: `YOUR_API_URL/posts/{{postId}}`, // Замените YOUR_API_URL\r",
							"            method: 'GET'\r",
							"        });\r",
							"\r",
							"        if (responseGet.code === 200) {\r",
							"            const currentPostData = responseGet.json();\r",
							"\r",
							"            // Создаем объект для данных обновления, используем текущие данные если не обновляем\r",
							"            const updatedPostData = {\r",
							"                text: Math.random() < 0.5 ? generateRandomText() : currentPostData.text,\r",
							"                likes: Math.random() < 0.5 ? generateRandomLikes() : currentPostData.likes,\r",
							"                tags: Math.random() < 0.5 ? generateRandomTags() : currentPostData.tags,\r",
							"                image: currentPostData.image, // Пример: поле image не меняется\r",
							"                owner: currentPostData.owner // owner не меняется\r",
							"            };\r",
							"\r",
							"            pm.environment.set(\"updatedPostData\", JSON.stringify(updatedPostData));\r",
							"\r",
							"        } else {\r",
							"            console.error(`Error fetching post ${responseGet.code} - ${responseGet.response.text()}`);\r",
							"        }\r",
							"    } catch (error) {\r",
							"        console.error(\"Error in Pre-request Script:\", error);\r",
							"    }\r",
							"}\r",
							"\r",
							"let postsData = pm.environment.get(\"postsData\");\r",
							"if (postsData) {\r",
							"    postsData = JSON.parse(postsData);\r",
							"} else {\r",
							"    console.error(\"No posts data found in environment variable 'postsData'\");\r",
							"    return; // Выходим, если нет данных\r",
							"}\r",
							"\r",
							"//Выбираем случайный пост\r",
							"if (postsData && postsData.length > 0) {\r",
							"    const randomIndex = Math.floor(Math.random() * postsData.length);\r",
							"    const randomPost = postsData[randomIndex];\r",
							"    const postId = randomPost.id;\r",
							"\r",
							"    // Генерируем случайные изменения (адаптируйте под свои поля)\r",
							"    const updatedPost = {\r",
							"        ...randomPost,\r",
							"        text: Math.random() < 0.5 ? generateRandomText(randomPost.text) : randomPost.text,\r",
							"        likes: Math.random() < 0.5 ? randomPost.likes + Math.floor(Math.random() * 10) : randomPost.likes\r",
							"    };\r",
							"\r",
							"    // Устанавливаем данные в переменные Postman для использования в теле запроса\r",
							"    pm.environment.set(\"postId\", postId);\r",
							"    pm.environment.set(\"updatedPostData\", JSON.stringify(updatedPost));\r",
							"\r",
							"} else {\r",
							"    console.error(\"No posts found.\");\r",
							"}\r",
							"\r",
							"\r",
							"// Генерация случайных данных\r",
							"const randomLikes = generateRandomLikes();\r",
							"const randomTags = generateRandomTags();\r",
							"const randomText = generateRandomText();\r",
							"const randomImage = generateRandomPictureUrl();\r",
							"\r",
							"// Устанавливаем значения переменных Postman\r",
							"pm.environment.set(\"likes\", randomLikes);\r",
							"pm.environment.set(\"tags\", randomTags);\r",
							"pm.environment.set(\"text\", randomText);\r",
							"pm.environment.set(\"image\", randomImage);\r",
							"pm.environment.set(\"owner\", randomUserId);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"text\": \"{{text}}\",\r\n  \"image\": \"{{image}}\",\r\n  \"likes\": {{likes}},\r\n  \"tags\": \"{{tags}}\",\r\n  \"owner\": \"67a465223cf095a76f82c430\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}post/67a466af3cf095479582c45c",
					"host": [
						"{{url}}post"
					],
					"path": [
						"67a466af3cf095479582c45c"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Comment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"try {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    // 1. Получаем id поста\r",
							"    const postId = responseData.id;\r",
							"    if (postId) {\r",
							"        pm.environment.set(\"postId\", postId);\r",
							"        console.log(\"Post ID:\", postId);\r",
							"    } else {\r",
							"        console.error(\"Post ID not found in response.\");\r",
							"    }\r",
							"\r",
							"    // 2. Получаем id пользователей и устанавливаем их, если они есть\r",
							"   let userIds = null;\r",
							"    if (responseData.data && Array.isArray(responseData.data)) {\r",
							"        // Если есть массив data c юзерами\r",
							"        userIds = responseData.data.map(user => user.id);\r",
							"        if (userIds && userIds.length > 0) {\r",
							"            pm.environment.set(\"user_ids\", JSON.stringify(userIds));\r",
							"            console.log(\"User IDs:\", userIds);\r",
							"        } else {\r",
							"            console.error(\"No User IDs found in data array.\");\r",
							"        }\r",
							"    }  else if (responseData.owner && responseData.owner.id) {\r",
							"        // Если есть поле owner.id\r",
							"        const ownerId = responseData.owner.id;\r",
							"        pm.environment.set(\"ownerId\", ownerId);\r",
							"        console.log(\"Owner ID:\", ownerId);\r",
							"        pm.environment.set(\"user_ids\", JSON.stringify([ownerId]))\r",
							"    }  else {\r",
							"        console.error(\"User IDs or owner id not found in response.\");\r",
							"    }\r",
							"} catch (error) {\r",
							"    console.error(\"Error parsing response body as JSON:\", error);\r",
							"      if(pm.response.text()) {\r",
							"       console.error(\"Response Body is not valid JSON: \", pm.response.text());\r",
							"    }\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Функция для генерации случайного сообщения\r",
							"function generateRandomMessage(minLength = 0, maxLength = 5) {\r",
							"    const messageLength = Math.floor(Math.random() * (maxLength - minLength + 1)) + minLength;\r",
							"    let message = \"\";\r",
							"    const alphabet = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZабвгдеёжзикламнопрстуфхцшщъыьэюяАБВГДЕЁЖЗИКЛМНОПРСТУФХЦШЩЪЫЬЭЮЯ0123456789@$%^*(){}/:,?!-+=\\\"[]\"\r",
							"    for (let i = 0; i < messageLength; i++) {\r",
							"        message += alphabet.charAt(Math.floor(Math.random() * alphabet.length));\r",
							"    }\r",
							"    return message;\r",
							"}\r",
							"\r",
							"(function() {\r",
							"    // 1. Получение user_ids из переменной окружения Postman\r",
							"    const userIdsString = pm.environment.get(\"user_ids\");\r",
							"    let userIds = [];\r",
							"\r",
							"    try {\r",
							"        userIds = JSON.parse(userIdsString);\r",
							"    } catch (error) {\r",
							"        console.error(\"Error parsing user IDs:\", error);\r",
							"    }\r",
							"\r",
							"    let currentUserId = null;\r",
							"\r",
							"    if (Array.isArray(userIds) && userIds.length > 0) {\r",
							"        // Выбираем случайного пользователя из массива user_ids\r",
							"        const randomIndex = Math.floor(Math.random() * userIds.length);\r",
							"        currentUserId = userIds[randomIndex];\r",
							"    } else {\r",
							"        // Если user_ids не доступен, используем ownerId\r",
							"        const ownerId = pm.environment.get('ownerId');\r",
							"        if (ownerId) {\r",
							"            currentUserId = ownerId;\r",
							"        } else {\r",
							"             console.error(\"No user IDs or ownerId available\");\r",
							"            return; // Прерываем выполнение, если нет ни user_ids, ни ownerId\r",
							"        }\r",
							"    }\r",
							"\r",
							"\r",
							"    // 2. Получение post id\r",
							"     const postId = pm.environment.get(\"postId\");\r",
							"    if (!postId) {\r",
							"       console.error(\"Post ID not available\");\r",
							"        return; //Прерываем выполнение если нет postId\r",
							"    }\r",
							"\r",
							"    // 3. Генерация случайного сообщения\r",
							"    const randomMessage = generateRandomMessage();\r",
							"\r",
							"    // 4. Установка переменных Postman\r",
							"    pm.environment.set(\"message\", randomMessage);\r",
							"    pm.environment.set(\"owner\", String(currentUserId));\r",
							"    pm.environment.set(\"post\", String(postId));\r",
							"\r",
							"    // Сохраняем объект в comment_data для будущего использования (опционально)\r",
							"     const data = {\r",
							"      message: randomMessage,\r",
							"      owner: String(currentUserId),\r",
							"      post: String(postId),\r",
							"      };\r",
							"     pm.environment.set(\"comment_data\", JSON.stringify(data));\r",
							"    console.log(\"Generated comment data:\", data)\r",
							"\r",
							"\r",
							"})();"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"message\": \"{{message}}\",\r\n    \"owner\": \"67a465223cf095a76f82c430\",\r\n    \"post\": \"67a466af3cf095479582c45c\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}comment/create",
					"host": [
						"{{url}}comment"
					],
					"path": [
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check User Comment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 600ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}user/67a465223cf095a76f82c430/comment",
					"host": [
						"{{url}}user"
					],
					"path": [
						"67a465223cf095a76f82c430",
						"comment"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check Post (comment)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}post/67a466af3cf095479582c45c/comment",
					"host": [
						"{{url}}post"
					],
					"path": [
						"67a466af3cf095479582c45c",
						"comment"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "62e6f10d11c051e2d93a6723",
				"type": "string"
			},
			{
				"key": "key",
				"value": "app-id",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}